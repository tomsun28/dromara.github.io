<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dromara on dromara(Open source organization)</title><link>/zh/</link><description>Recent content in Dromara on dromara(Open source organization)</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="/zh/index.xml" rel="self" type="application/rss+xml"/><item><title>Hutool-5.8.0.M1 发布，尝试里程碑发布</title><link>/zh/community/hutool-5.8.0/</link><pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate><guid>/zh/community/hutool-5.8.0/</guid><description>Hutool是一个小而全的Java工具类库，提供优雅、高效和便捷的工具方法。 Hutool是什么 本来这个版本应该是5.7.23的，可惜用户提了</description></item><item><title>Soul网关学习Apache Dubbo插件原理解析</title><link>/zh/blog/soul_source_learning_22_apache_dubbo/</link><pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_22_apache_dubbo/</guid><description>目标 Apache Dubbo 插件介绍 元数据介绍 Apache Dubbo 插件配置 Bootstrap pom 配置 soul-admin 配置 dubbo服务pom配置 Apache Dubbo 泛化调用介绍 通过API方式使用泛化调用 通过spring使用泛</description></item><item><title>Soul网关学习Resilience4j插件原理解析</title><link>/zh/blog/soul_source_learning_21_resilience4j/</link><pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_21_resilience4j/</guid><description>目标 什么是Resilience4J soul的Resilience4j体验 限流 熔断 Resilience4J插件源码解读 什么是Resilienc</description></item><item><title>Soul网关学习Sentinel插件原理解析</title><link>/zh/blog/soul_source_learning_20_sentinel/</link><pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_20_sentinel/</guid><description>概述 在业务网关中熔断和流量控制都是非常必要的功能。soul在实现这部分功能时使用了不同的成熟组件，用户可以根据自己的喜好选择。本文将介绍如何</description></item><item><title>Soul网关学习Redirect插件原理解析</title><link>/zh/blog/soul_source_learning_19_redirect/</link><pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_19_redirect/</guid><description>介绍 Soul 网关在对目标服务进行代理调用的时候，可以使用 redirect 插件来重定向请求。其中包含两种场景：一种把 redirectUrl 配置为第三方URL 地址，直接使用 308 进行转发跳</description></item><item><title>Dromara Soul 源码01期阅读分享会02</title><link>/zh/activities/dromara-cloud-native-meet-02/</link><pubDate>Sat, 06 Feb 2021 15:00:00 +0000</pubDate><guid>/zh/activities/dromara-cloud-native-meet-02/</guid><description>Dromara 源码阅读（Soul 2021 首次活动） 日期：2021年2月6日，星期日 时间：20:00 – 23:00 地点：线上腾讯会议室 活动详情 20:00 - 20:10 开场介绍近期梦码分享情</description></item><item><title>Soul网关学习divide插件源码解读</title><link>/zh/blog/soul_source_learning_16_divide_sxj/</link><pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_16_divide_sxj/</guid><description>插件概述 插件定位 divide 插件是一个 http 正向代理插件，所有的 http 请求都由该插件进行负载均衡处理（具体的负载均衡策略在规则中指定）。 生效时机 当请求头的 rpcType =</description></item><item><title>Soul网关学习RateLimiter插件原理解析</title><link>/zh/blog/soul_source_learning_18_ratelimiter/</link><pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_18_ratelimiter/</guid><description>回顾 在之前的HTTP请求初探的文章中，大体梳理了Soul插件的处理流程，也得知了DividePlugin、GlobalPlugin，WebC</description></item><item><title>Soul网关学习SPI学习使用</title><link>/zh/blog/soul_source_learning_11_spi/</link><pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_11_spi/</guid><description>SOUL 中 SPI 的使用 在之前分析 divide 插件的负载均衡策略时, 有看到过一行代码: DivideUpstream divideUpstream = LoadBalanceUtils.selector(upstreamList, ruleHandle.getLoadBalance(), ip); 当时很简单的略过了它的实现, 它的作用很容易分析, 调用一个看似工具</description></item><item><title>Soul网关学习Sign插件</title><link>/zh/blog/soul_source_learning_12_sign/</link><pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_12_sign/</guid><description>介绍 sign插件用来对请求进行签名认证的插件 AK/SK 介绍 AK/SK（Access Key ID/Secret Access Key）即访问密钥，包含访问密钥ID（AK）和秘密访问密钥（</description></item><item><title>Soul网关学习Http长轮询解析02</title><link>/zh/blog/soul_source_learning_09_httplongpolling_02/</link><pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_09_httplongpolling_02/</guid><description>后台与网关数据同步 (Http长轮询篇) 长轮询分析的最后一篇, 总结网关端的长轮询的实现, 以及数据流动方式. 网关端长轮询的流程总体也分两个模块:</description></item><item><title>Soul网关学习Http请求探险</title><link>/zh/blog/soul_source_learning_17_http/</link><pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_17_http/</guid><description>回顾 在Soul 请求处理概览概览这篇文章中，我们已经知晓了Soul针对于请求的处理入库在DefaultSoulPluginChain的excu</description></item><item><title>Soul网关学习Nacos数据同步</title><link>/zh/blog/soul_source_learning_14_nacos/</link><pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_14_nacos/</guid><description>本篇分析一下Nacos同步数据原理 1、先配置一下环境 * soul-admin soul-admin/src/main/resources/application.yml soul: sync: nacos: url: localhost:8848 namespace: 1c10d748-af86-43b9-8265-75f487d20c6c # acm: # enabled: false # endpoint: acm.aliyun.com # namespace: # accessKey: # secretKey: soul-admin/pom.xml，这</description></item><item><title>Soul网关学习Http长轮询解析01</title><link>/zh/blog/soul_source_learning_08_httplongpolling_01/</link><pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_08_httplongpolling_01/</guid><description>后台与网关数据同步 (Http长轮询篇) 配置 后台信息模式切换 在上篇分析 Zookeeper 同步的文章 (Soul网关源码分析-11期) 中, 我们通过 DataSyncConfiguration 这个配置类做的</description></item><item><title>Soul网关学习WebSocket数据同步解析</title><link>/zh/blog/soul_source_learning_10_websocket/</link><pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_10_websocket/</guid><description>范金鹏 1.前情回顾 在第4篇中，我们分析了 HTTP 用户业务系统接入 Soul 网关后，会调用 soul-admin 的注册接口，把需要网关代理的接口信息全部注册到 soul-admin 上，在最后，会通</description></item><item><title>Dromara Soul 源码01期阅读分享会01</title><link>/zh/activities/dromara-cloud-native-meet/</link><pubDate>Thu, 21 Jan 2021 15:00:00 +0000</pubDate><guid>/zh/activities/dromara-cloud-native-meet/</guid><description>Dromara 源码阅读（Soul 2021 首次活动） 日期：2021年1月24日，星期日 时间：15:00 – 17:00 地点：线上腾讯会议室 活动详情 15:00 - 15:10 开场介绍梦码分享流程</description></item><item><title>Soul网关学习Zookeeper数据同步02</title><link>/zh/blog/soul_source_learning_13_zookeeper_02/</link><pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_13_zookeeper_02/</guid><description>启动admin，与网关。 admin操作，使用zookeeper同步数据到网关 上一篇，通过soul-admin启动过程为入口，分析了soul-</description></item><item><title>Soul网关学习插件链实现</title><link>/zh/blog/soul_source_learning_15_plugin_chain/</link><pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_15_plugin_chain/</guid><description>一、引言 插件是 Soul 的灵魂。 Soul 使用了插件化设计思想，实现了插件的热插拔，且极易扩展。内置丰富的插件支持，鉴权，限流，熔断，防火墙等等。 Soul 是如何实</description></item><item><title>Soul网关学习Admin源码分析</title><link>/zh/blog/soul_resource_learning_07_admin/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_resource_learning_07_admin/</guid><description>源码分析 页面操作源码分析 在分析源码之前，先看下图，页面显示加载的插件列表会对应后端的请求，根据后端请求，找到对应的controller类 然后</description></item><item><title>Soul网关学习Zookeeper数据同步01</title><link>/zh/blog/soul_source_learning_13_zookeeper_01/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_13_zookeeper_01/</guid><description>启动 soul-admin、soul-bootstrap， 使用zookeeper同步数据到网关 一、配置环境 1、soul-admin 服务配置，需</description></item><item><title>Soul网关学习(2-3)Http客户端接入源码解析</title><link>/zh/blog/soul_source_learning_02_http_client_register/</link><pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_02_http_client_register/</guid><description>HTTP 用户接入 Soul 网关注册逻辑分析 1. 注册入口 HTTP 用户接入 Soul 网关时，会调用 soul-admin 一个接口，把需要 Soul 网关管理的接口注册，今天就具体看看到底干了点儿啥。 先看下</description></item><item><title>Soul网关学习(2-2)Http代理之divide插件源码解析</title><link>/zh/blog/soul_source_learning_02_divide_plugin_source/</link><pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_02_divide_plugin_source/</guid><description>Divide 插件如何转发http请求 先来设想一下，网关如果收到了一个请求http://xxx.com/openapi/appname/order/fi</description></item><item><title>Soul网关学习(2-1)Http代理之divide插件使用</title><link>/zh/blog/soul_source_learning_02_divide_plugin/</link><pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_02_divide_plugin/</guid><description>Divide 插件使用 一、启动项目 先启动soul-bootstrap（9195）、soul-admin（9095）两个模块，我们通过bootstrap配</description></item><item><title>Soul网关学习(1)环境配置</title><link>/zh/blog/soul_source_learning_01/</link><pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_01/</guid><description>Soul源码分析（1） 环境配置 soul is a High-Performance Java API Gateway GitHub：https://github.com/dromara/soul 官方文档：https</description></item><item><title>Soul网关学习插件链与负载均衡解析</title><link>/zh/blog/soul_source_learning_05_plugin/</link><pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_05_plugin/</guid><description>插件链总结 从一个类关系图说起: 其中两个最基本的插件类: SoulPlugin: 定义插件职责的接口, 重点方法execute() 被上层调用, skip() 方法可以使某些插件在某些</description></item><item><title>Dromara 梦码读书会介绍</title><link>/zh/activities/dromara-activites-introduce/</link><pubDate>Sun, 27 Dec 2020 15:00:00 +0000</pubDate><guid>/zh/activities/dromara-activites-introduce/</guid><description>Dromara 梦码读书会（Dromara 2020 活动介绍） 日期：2020年12月27日，星期日 活动背景 为了提高社区参与者的积极性, 促进Dromara社区的建设</description></item><item><title>时隔一年，dromara团队发布全新架构Hmily分布式事务的2.1.1版本</title><link>/zh/community/hmily-2.1.1/</link><pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate><guid>/zh/community/hmily-2.1.1/</guid><description>感谢朋友们一路以来的支持，让大家久等了。在这一个版本中，我们团队重构了整个项目，合理的划分功能模块，新增配置中心，调整底层存储结构，解决疑难</description></item><item><title>Hmily分布式事务重启月度报告</title><link>/zh/community/hmily-restart/</link><pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate><guid>/zh/community/hmily-restart/</guid><description>Hmily是一款高性能，高可靠，易使用的柔性分布式事务解决方案，目前提供了对dubbo，spring-cloud，motan，grpc等rp</description></item><item><title>【Soul网关发布2.2.0】让高性能网关变得如此简单！</title><link>/zh/community/soul-2.2.0/</link><pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate><guid>/zh/community/soul-2.2.0/</guid><description>我们还是先来看看新增功能，然后再讲故事。 完全的插件化架构设计，插件热插拔。 完整支持dubbo所有版本，alibaba-dubbo ，apach</description></item><item><title>Soul网关发布的2.1.X版本，到底有多方便？</title><link>/zh/community/soul-2.1.x/</link><pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate><guid>/zh/community/soul-2.1.x/</guid><description>Soul 网关自从去年10月我开源以来，经历了一年的事情，接受到了来自社区很多朋友的建议，并进行持续不断的优化，已经提供了非常丰富的功能，很多功能都</description></item><item><title>Soul网关发布1.0.4-RELEASE版本</title><link>/zh/community/soul-1.0.4/</link><pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate><guid>/zh/community/soul-1.0.4/</guid><description>Soul网关发布1.0.4-RELEASE版本 修复在1.0.3版本的后台管理中，出现的bug。 配置信息序列化方式支持自定义扩展。默认的序列化</description></item><item><title>Hmily发布2.0.2-RELEASE版本</title><link>/zh/community/hmily-2.0.2/</link><pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate><guid>/zh/community/hmily-2.0.2/</guid><description>Hmily 发布2.0.2-RELEASE 版本 解决SpringCloud 使用hystrix 配置线程池策略的问题。 新增对springcloud 内嵌事务调</description></item><item><title>Hmily: 轻松搞定高并发分布式事务</title><link>/zh/blog/hmily_current/</link><pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate><guid>/zh/blog/hmily_current/</guid><description>Hmily高并发事务处理 开始先打个小小的广告 Hmily在参开源中国年度受欢迎投票 https://www.oschina.net/project/top_cn_2018?origin=zhzd 点击链接，搜索Hmily帮忙投下票,在第11横排第二个，感</description></item><item><title>Hmily: 高性能异步分布式事务TCC框架</title><link>/zh/blog/hmily_introduction/</link><pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate><guid>/zh/blog/hmily_introduction/</guid><description>Hmily框架特性[https://github.com/yu199195/hmily] 无缝集成Spring,Spring boot start。 无缝</description></item><item><title>Athena介绍</title><link>/zh/projects/athena/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/athena/overview/</guid><description>文档完善中，敬请期待</description></item><item><title>Dubbo 快速开始</title><link>/zh/projects/myth/quick-start-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/myth/quick-start-dubbo/</guid><description>cd https://github.com/yu199195/myth/tree/master/myth-demo/myth-demo-dubbo Modifiy application.yml on Indicator Item And Modifiy you jdbc url And choose you Message Oriented Middleware spring: datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://192.168.1.68:3306/myth_account?useUnicode=true&amp;amp;characterEncoding=utf8 username: xiaoyu password: Wgj@555888 #activemq: # broker-url: tcp://120.76.52.162:61616 # user: happylife # password: happylifeplat01 # trust-all: true #rabbitmq: # host: localhost # port: 5672 # username: guest # password: guest rocketmq: namesrvAddr: 192.168.1.148:9876 consumerGroupName: account instanceName: account #kafka: # consumer: # bootstrap-servers: localhost:9092 # group-id: test</description></item><item><title>Dubbo 用户</title><link>/zh/projects/myth/dubbo-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/myth/dubbo-user/</guid><description>在dubbo api 项目引入myth-annotation jar包 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.github.myth&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;myth-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 在dubbo interface 方法上加上@Myth注解 ,并设置消息队列名称,此队列就是消</description></item><item><title>Dubbo快速体验</title><link>/zh/projects/hmily/quick-start-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/quick-start-dubbo/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git Zookeeper 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 打开项目，找到hmily-dem</description></item><item><title>Grpc快速体验</title><link>/zh/projects/hmily/quick-start-grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/quick-start-grpc/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git Zookeeper 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 打开项目，找到hmily-dem</description></item><item><title>Grpc用户指南</title><link>/zh/projects/hmily/user-grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/user-grpc/</guid><description>Grpc用户指南 目前只支持grpc的一元同步调用 引入jar包 引入hmily配置 在具体的实现方法上（服务提供端），加上@HmilyTCC or HmilyTAC 注</description></item><item><title>Hmily 介绍</title><link>/zh/projects/hmily/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/overview/</guid><description>Hmily是什么？ Hmily是一款高性能，零侵入，金融级分布式事务解决方案，目前主要提供柔性事务的支持，包含 TCC, TAC(自动生成回滚SQL) 方</description></item><item><title>Hmily-Admin</title><link>/zh/projects/hmily/admin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/admin/</guid><description>Hmily-Admin 启动教程（未完成）: admin 是Hmily中查看事务日志的后台管理系统。 可以查看异常的日志，修改重试次数等功能. 首先确保你的项目使用了Hmily并</description></item><item><title>Hmily-Config</title><link>/zh/projects/hmily/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/config/</guid><description>配置详解： 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf</description></item><item><title>Hmily-Config-Apollo</title><link>/zh/projects/hmily/config-apollo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/config-apollo/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Config-Consul</title><link>/zh/projects/hmily/config-consul/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/config-consul/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Config-Etcd</title><link>/zh/projects/hmily/config-etcd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/config-etcd/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Config-Local</title><link>/zh/projects/hmily/config-local/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/config-local/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Config-Nacos</title><link>/zh/projects/hmily/config-nacos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/config-nacos/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Config-Zookeeper</title><link>/zh/projects/hmily/config-zookeeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/config-zookeeper/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Context</title><link>/zh/projects/hmily/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/context/</guid><description>HmilyTransactionContext事务上下文 @Data public class HmilyTransactionContext { /** * transId. */ private Long transId; /** * participant id. */ private Long participantId; /** * participant ref id. */ private Long participantRefId; /** * this hmily action. */ private int action; /** * 事务</description></item><item><title>Hmily-Metrics</title><link>/zh/projects/hmily/metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/metrics/</guid><description>Metrics 目前hmily的metrics模块，采用 prometheus来进行采集，使用pull模式对外暴露metrics信息接口。 收集的metric</description></item><item><title>Hmily-TCC</title><link>/zh/projects/hmily/tcc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/tcc/</guid><description>TCC TCC模式是经典的柔性事务解决方案，需要使用者提供 try, confirm, cancel 三个方法， 真正的情况下会执行 try, confirm, 异常情况下会执行try, cancel。 confirm 方法并不是</description></item><item><title>Hmily-annotation</title><link>/zh/projects/hmily/annotation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/annotation/</guid><description>@Hmily /** * The annotation Hmily. * * @author xiaoyu */ @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) public @interface Hmily { } 该注解为hmily分布式事务接口标识，表示该接口参与hmily分布式事务 @HmilyTCC @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) public @interface HmilyTCC { /** * Confirm method string. * * @return the</description></item><item><title>Hmily-code-conduct</title><link>/zh/projects/hmily/code-conduct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/code-conduct/</guid><description/></item><item><title>Hmily-committer</title><link>/zh/projects/hmily/committer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/committer/</guid><description>提交者提名 当你做了很多贡献以后，社区会进行提名。 成为committer你会拥有 hmily仓库写的权限 idea 正版使用 提交者责任 开发新功能； 代码重构</description></item><item><title>Hmily-contributor</title><link>/zh/projects/hmily/contributor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/contributor/</guid><description>您可以报告bug，提交一个新的功能增强建议或者直接对以上内容提交改进补丁。 提交issue 在提交issue之前，请经过充分的搜索，确定该iss</description></item><item><title>Hmily-tac</title><link>/zh/projects/hmily/tac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/tac/</guid><description>TAC TAC模式其实是TCC模式的变种,顾名思义 TAC 模式被称为自动回滚,相比于 TCC模式，用户完全不用关心 回滚方法如何去写，减少了用户的开发量，对</description></item><item><title>Hodor介绍</title><link>/zh/projects/hodor/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hodor/overview/</guid><description>文档完善中，敬请期待</description></item><item><title>Jinx 介绍</title><link>/zh/projects/jinx/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/jinx/overview/</guid><description>Spring-boot框架采用netty取代tomcat来做http服务 Spring-boot用户 首先引起jar包 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.happylife.netty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;happylife-netty&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 在spring-</description></item><item><title>Motan 快速开始</title><link>/zh/projects/myth/quick-start-motan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/myth/quick-start-motan/</guid><description>cd https://github.com/yu199195/myth/tree/master/myth-demo/myth-demo-motan Modifiy application.yml on Indicator Item And Modifiy you jdbc url And zookeeper url And choose you Message Oriented Middleware spring: motan: zookeeper: 192.168.1.148:2181 datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://192.168.1.68:3306/myth_account?useUnicode=true&amp;amp;characterEncoding=utf8 username: xiaoyu password: Wgj@555888 #activemq: # broker-url: tcp://120.76.52.162:61616 # user: happylife # password: happylifeplat01 # trust-all: true #rabbitmq: # host: localhost # port: 5672 # username: guest # password: guest rocketmq: namesrvAddr: 192.168.1.148:9876 consumerGroupName: account instanceName: account #kafka: # consumer:</description></item><item><title>Motan 用户</title><link>/zh/projects/myth/motan-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/myth/motan-user/</guid><description>在motan api 项目引入myth-annotation jar包 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.github.myth&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;myth-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 在motan interface 方法上加上@Myth注解 ,并设置消息队列名称,此队列就是消</description></item><item><title>Motan快速体验</title><link>/zh/projects/hmily/quick-start-motan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/quick-start-motan/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git Zookeeper 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 打开项目，找到hmily-dem</description></item><item><title>Motan用户指南</title><link>/zh/projects/hmily/user-motan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/user-motan/</guid><description>Motan接口部分 在你的接口项目中引入jar包。 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 在需要进行Hmily分布式事务的接口方法上加上 @Hmily 标识。 public interface HelloService { @Hmily void say(String hello); } Motan</description></item><item><title>Myth 介绍</title><link>/zh/projects/myth/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/myth/overview/</guid><description>采用消息队列解决分布式事务的开源框架, 基于java语言来开发（JDK1.8），支持dubbo，springcloud,motan等rpc框架</description></item><item><title>Myth 配置</title><link>/zh/projects/myth/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/myth/config/</guid><description>注解源码解析 /** * myth分布式事务框架注解 */ @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD}) public @interface Myth { /** * The destination name for this listener, resolved through the container-wide */ String destination(); /** * 目标接口类 * 如果是springcloud用户，需要</description></item><item><title>Myth-admin 启动教程</title><link>/zh/projects/myth/start-myth-admin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/myth/start-myth-admin/</guid><description>启动前提：分布式事务项目已经部署并且运行起来，用户根据自己的RPC框架进行使用 首先用户使用的JDK必须是1.8+ 本地安装了git ,maven ，执行以下</description></item><item><title>Raincat 介绍</title><link>/zh/projects/raincat/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/raincat/overview/</guid><description>Raincat 强一致性分布式事务，是基于二阶段提交+本地事务补偿机制来实现。原理介绍 基于java语言来开发（JDK1.8），支持dubbo,motan,</description></item><item><title>SpringCloud 用户</title><link>/zh/projects/myth/springcloud-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/myth/springcloud-user/</guid><description>在springcloud 服务提供方（事务的参与方法，被调用方） 引入myth-springcloud 包 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.github.myth&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;myth-springcloud&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 配置 MythTransactio</description></item><item><title>SpringCloud快速体验</title><link>/zh/projects/hmily/quick-start-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/quick-start-springcloud/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 打开项目，找到hmily-demo</description></item><item><title>SpringCloud快速开始</title><link>/zh/projects/myth/quick-start-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/myth/quick-start-springcloud/</guid><description>cd https://github.com/yu199195/myth/tree/master/myth-demo/myth-demo-springcloud run EurekaServerApplication.java Modifiy application.yml on Indicator Item And Modifiy you jdbc url And choose you Message Oriented Middleware spring: datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://192.168.1.68:3306/myth_account?useUnicode=true&amp;amp;characterEncoding=utf8 username: xiaoyu password: Wgj@555888 #activemq: # broker-url: tcp://120.76.52.162:61616 # user: happylife # password: happylifeplat01 # trust-all: true #rabbitmq: # host: localhost # port: 5672 # username: guest # password: guest rocketmq: namesrvAddr: 192.168.1.148:9876 consumerGroupName: account instanceName: account #kafka: # consumer: # bootstrap-servers: localhost:9092 #</description></item><item><title>SpringCloud用户指南</title><link>/zh/projects/hmily/user-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/user-springcloud/</guid><description>Spring-Cloud 用户指南 步骤一: 引入依赖jar包 步骤二：引入hmily配置 步骤三：在具体的实现方法上（服务提供端），加上HmilyTCC or HmilyTAC 注解 步骤四：在</description></item><item><title>TxTransactionBootstrap配置详解</title><link>/zh/projects/raincat/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/raincat/config/</guid><description>@TxTransaction annotation详解 该注解为分布式事务的切面（AOP point） ，如果业务方的service服务需要参与分布式事务，则需要加上此注解。</description></item><item><title>dubbo 快速体验</title><link>/zh/projects/raincat/quick-start-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/raincat/quick-start-dubbo/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git Redis Mysql 代码拉取 &amp;gt; git clone https://github.com/yu199195/Raincat.git &amp;gt; cd Raincat &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 或者eclipse 打开项目。 修</description></item><item><title>dubbo用户指南</title><link>/zh/projects/hmily/user-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/user-dubbo/</guid><description>Dubbo接口部分 在你的接口项目中引入jar包。 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 在需要进行Hmily分布式事务的接口方法上加上 @Hmily 标识。 public interface HelloService { @Hmily void say(String hello); } Dubbo</description></item><item><title>dubbo用户指南</title><link>/zh/projects/raincat/dubbo-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/raincat/dubbo-user/</guid><description>首先启动raincat-manager，具体怎么启动参考 启动manager jar包依赖，在你的dubbo服务端添加jar包，并在需要参与分布</description></item><item><title>motan用户指南</title><link>/zh/projects/raincat/motan-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/raincat/motan-user/</guid><description>首先启动raincat-manager，具体怎么启动参考 启动manager jar包依赖，在你的服务端添加jar包，并在需要参与分布式事务的方</description></item><item><title>sofa-rpc快速体验</title><link>/zh/projects/hmily/quick-start-rpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/quick-start-rpc/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git Zookeeper 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 打开项目，找到hmily-dem</description></item><item><title>sofa-rpc用户指南</title><link>/zh/projects/hmily/user-rpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/user-rpc/</guid><description>sofa-rpc接口项目 在你的接口项目中引入jar包。 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 在需要进行Hmily分布式事务的接口方法上加上 @Hmily 标识。 public interface HelloService { @Hmily void say(String hello); } so</description></item><item><title>springcloud快速体验</title><link>/zh/projects/raincat/quick-start-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/raincat/quick-start-springcloud/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git Redis Mysql 代码拉取 &amp;gt; git clone https://github.com/yu199195/Raincat.git &amp;gt; cd Raincat &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 或者eclipse 打开项目。 修</description></item><item><title>springcloud用户指南</title><link>/zh/projects/raincat/springcloud-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/raincat/springcloud-user/</guid><description>首先启动raincat-manager，具体怎么启动参考 启动manager jar包依赖，在你的服务端添加jar包，并在需要参与分布式事务的方</description></item><item><title>tars快速体验</title><link>/zh/projects/hmily/quick-start-tars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/quick-start-tars/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git Zookeeper 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 建立tars节点 根据此文在当前tars平台建立</description></item><item><title>tars用户指南</title><link>/zh/projects/hmily/user-tars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/user-tars/</guid><description>Tars用户指南 引入jar包 引入hmily配置 在需要进行Hmily分布式事务的自动生成的Servant接口方法上加上 @Hmily 标识。 在具体的实现方法</description></item><item><title>启动raincat-admin</title><link>/zh/projects/raincat/admin-starter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/raincat/admin-starter/</guid><description>raincat-admin 启动教程 启动前提：分布式事务项目已经部署并且运行起来，用户根据自己的RPC框架进行使用 dubbo 用户 springcloud 用户 启动方式一：自己打包进行部署。 首先用户使</description></item><item><title>启动raincat-manager</title><link>/zh/projects/raincat/raincat-manager-starter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/raincat/raincat-manager-starter/</guid><description>启动raincat-manager 方式一：自己拉取代码编译：https://github.com/yu199195/Raincat 修改app</description></item><item><title>团队介绍</title><link>/zh/projects/hmily/team/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/team/</guid><description>团队成员（排名不分先后） 名字 github 角色 所在公司 肖宇 yu199195 VP 京东 张永伦 tuohai666 committer 京东 赵俊 cherrylzhao committer 联通 陈斌 prFor committer 某创业公司 李浪 cysy-lli committer 携程 汤煜冬 tydhot committer perfma</description></item><item><title>术语</title><link>/zh/projects/hmily/term/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/term/</guid><description>术语 发起者：全局事务的发起者，在一个请求链路资源方法里面，最先需要对分布式资源进行事务处理的地方，在Hmily框架里面 可以表示为：一个请求最</description></item><item><title>问题</title><link>/zh/projects/hmily/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/faq/</guid><description>我引用了jar包，发现启动不了，报错怎么办？ 答：这种需要你自己去定位问题，查看是否按照文档来进行配置，环境是否正确，是否有依赖冲突问题，实在</description></item></channel></rss>